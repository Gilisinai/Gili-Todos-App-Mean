{"version":3,"sources":["./src/app/auth/auth-routing.module.ts","./src/app/auth/signup/signup.component.html","./src/app/auth/signup/signup.component.ts","./src/app/auth/auth.module.ts","./src/app/auth/login/login.component.html","./src/app/auth/login/login.component.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\n\r\nconst routes: Routes = [\r\n    { path: 'login', component: LoginComponent},\r\n    { path: 'signup', component: SignupComponent}\r\n]\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {}","<mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form (submit)=\"onSignup(signupForm)\" #signupForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n        <mat-form-field>\r\n            <input \r\n            matInput \r\n            required\r\n            email\r\n            type=\"email\"            \r\n            placeholder=\"Email Adresss\"\r\n            #emailInput=\"ngModel\"\r\n            name=\"email\"\r\n            ngModel\r\n            >\r\n            <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email</mat-error>\r\n            <mat-hint  *ngIf=\"emailInput.valid\">Great email!</mat-hint>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input \r\n            matInput \r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            #passwordInput=\"ngModel\"\r\n            name=\"password\"\r\n            ngModel\r\n            required\r\n            minlength=\"6\"\r\n            >\r\n            <mat-error *ngIf=\"passwordInput.invalid\">Password must contain at least 6 characters</mat-error>\r\n            <mat-hint  *ngIf=\"passwordInput.valid\">You Are Good To Go!!</mat-hint>\r\n        </mat-form-field>\r\n        <button \r\n        mat-raised-button \r\n        color=\"accent\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        >Signup</button>\r\n    </form>\r\n</mat-card>\r\n","import { Component, OnDestroy, OnInit } from \"@angular/core\"\r\nimport { NgForm } from '@angular/forms'\r\nimport { Subscription } from \"rxjs\"\r\n\r\nimport { AuthService } from '../auth.service'\r\n\r\n@Component({\r\n    templateUrl: './signup.component.html',\r\n    styleUrls: ['./signup.component.css']\r\n})\r\nexport class SignupComponent implements OnInit, OnDestroy {\r\n    isLoading = false\r\n    private authStatusSub: Subscription;\r\n\r\n    constructor(public authService: AuthService) { }\r\n\r\n    ngOnInit() {\r\n        this.authStatusSub = this.authService.getAuthStatusListenter().subscribe(\r\n            authStatus => {\r\n                this.isLoading = false\r\n            }\r\n        )\r\n    }\r\n\r\n    onSignup(form: NgForm) {\r\n        if (form.invalid) {\r\n            return\r\n        }\r\n        this.isLoading = true\r\n        this.authService.createUser(form.value.email, form.value.password)\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.authStatusSub.unsubscribe()\r\n    }\r\n}","import { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule ,ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AngularMaterialModule } from \"../angular-material.module\";\r\nimport { AuthRoutingModule } from \"./auth-routing.module\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { SignupComponent } from \"./signup/signup.component\";\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        SignupComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AngularMaterialModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        AuthRoutingModule\r\n    ]\r\n})\r\nexport class AuthModule {}","<mat-card>\r\n    <mat-spinner *ngIf=\"isLoading\"></mat-spinner>\r\n    <form (submit)=\"onLogin(loginForm)\" #loginForm=\"ngForm\" *ngIf=\"!isLoading\">\r\n        <mat-form-field>\r\n            <input \r\n            matInput \r\n            required\r\n            email\r\n            type=\"email\"            \r\n            placeholder=\"Email Adresss\"\r\n            #emailInput=\"ngModel\"\r\n            name=\"email\"\r\n            ngModel\r\n            >\r\n            <mat-error *ngIf=\"emailInput.invalid\">Please enter a valid email</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <input \r\n            matInput \r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            #passwordInput=\"ngModel\"\r\n            name=\"password\"\r\n            ngModel\r\n            required\r\n            >\r\n            <mat-error *ngIf=\"passwordInput.invalid\">Please enter a valid password</mat-error>\r\n        </mat-form-field>\r\n        <button \r\n        mat-raised-button \r\n        color=\"accent\"\r\n        type=\"submit\"\r\n        *ngIf=\"!isLoading\"\r\n        >Login</button>\r\n    </form>\r\n</mat-card>\r\n","import { Component, OnDestroy, OnInit } from \"@angular/core\"\r\nimport { NgForm } from '@angular/forms'\r\nimport { AuthService } from \"../auth.service\"\r\nimport { Subscription } from 'rxjs'\r\n\r\n@Component({\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n    isLoading = false\r\n    private authStatusSub: Subscription;\r\n\r\n    constructor(public authService: AuthService) { }\r\n\r\n    ngOnInit() {\r\n        this.authStatusSub = this.authService.getAuthStatusListenter().subscribe(\r\n            authStatus => {\r\n                this.isLoading = false\r\n            }\r\n        )\r\n    }\r\n\r\n    onLogin(form: NgForm) {\r\n        if (form.invalid) {\r\n            return\r\n        }\r\n        this.isLoading = true\r\n        this.authService.login(form.value.email, form.value.password)\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.authStatusSub.unsubscribe()\r\n    }\r\n}"],"sourceRoot":"webpack:///"}